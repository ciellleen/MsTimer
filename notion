# MsTimer2

## 라이브러리 다운로드

1. tools를 선택하고 그 다음 Manage Libraries를 선택.
    
    ![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/43f4c680-a7ab-4f2d-b233-d37ec40472ce/6774e597-9118-4cae-8bce-4eada9b08958/Untitled.png)
    
2. 다음과 같은 윈도우가 화면에 뜸
3. 화면 상단에 mstimer2를 입력하고 아래에 있는 것에 마우스를 올리면 오른쪽 아래에 install 버튼이 뜬다. 이 버튼을 클릭하면 라이브러리가 IDE에 설치된다. 
    
    ![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/43f4c680-a7ab-4f2d-b233-d37ec40472ce/e48c4bdd-74ec-47b4-9bf8-26b3a2dbd096/Untitled.png)
    
4. 설치가 완료되면 “INSTALLED”라는 글자가 MsTimer2 옆에 표시가 된다. 

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/43f4c680-a7ab-4f2d-b233-d37ec40472ce/26a0542e-b1a6-48fb-99ff-1a2532e7ea18/Untitled.png)

## MsTimer2::set(ms, ISR)

타이머 주기와 타이머 인터럽트 처리 함수를 설정한다.

- 매개변수
    - ms: 밀리초 단위로 타이머 주기를 정한다. unsigned long  타입이므로 약 50일 정도의 시간까지 설정할 수 있다. 그냥 숫자를 넣어도 되고 변수에 값을 넣은 후에 변수를 써도 됨.
    - void(*f)(): 타이머 인터럽트가 발생했을 대 사용하는 함수.
        - 반환값이 없는 함수
        - 우리가 마음대로 이름을 적을 수 있음.
    - ISR: ms로 설정한 밀리초 주기마다 발생하는 타이머 인터럽트 처리 함수명, 타이머가 해제되기 전까지 주기적으로 호출된다. 인터럽트 함수이므로 loop() 구문의 내용과 관계 없이 독립적으로 호출된다.
- returns: 없음
- ISR 함수는 외부 인터럽트에서 사용했던 ISR과 동일하게 loop() 구문의 내용과 관계없이 타이머 인터럽트(설정한 시간이 지나면 자동으로 발생)가 발생한 순간 자동으로 호출되기 때문에 loop()함수가 사용되어도 전혀 영향을 받지 않는다.
    - 인터럽트란?: 실행중인 프로그램을 일시 중단하고 다른 프로그램을 끼워 넣어 실행시키는 것. 인터럽트 요인이 되는 조건이 생겼을 대 실행 중인 프로그램(A)를 중단하여 강제적으로 특정한 주소로 제어를 옮기고, 준비되어 있는 인터럽트 처리 프로그램(B)를 실행시키며, 그 처리가 끝나면 원래의 프로그램으로 되돌아가서 계속 실행시킨다.
        - 프로그램 처리의 효율화, 입출력 장치의 동시 동작 온라인 처리의 효율화를 기할수 있다.
        
        ![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/43f4c680-a7ab-4f2d-b233-d37ec40472ce/5a8d9c93-0cca-4248-bd57-3e90e56e2f12/Untitled.png)
        
- MsTimer2는 타이머 인터럽트를 구성하는 경우 3번핀, 9번핀은 PWM 출력 기능으로 사용하지 못한다.

## MsTimer2::start()

- 타이머를 활성화한다. 이 함수가 호출된 순간부터 인터럽트가 발생. 매개 변수는 없다.

## MsTimer2::stop()

- 타이머를 해체한다. 이 후로 인터럽트 함수가 호출되지 않는다. 매개 변수는 없다.

# MsTimer2를 사용하는 이유

**1. 간편한 타이머 설정**

- Arduino와 같은 마이크로컨트롤러에서 사용하는 간단한 타이머 설정 라이브러리이다.

**2. 다른 작업 방해 없음**

- delay() 함수와 달리, 프로그램이 정지하지 않고도 주기적으로 작업을 실행할 수 있어 다른 작업과 동시에 사용이 가능하다.

**3. 정밀한 타이밍 제어**

- 매우 정밀한 시간 제어를 통해 타이밍이 중요한 애플리케이션에서 유용하게 사용된다.

**4. 자원 제한 환경에서의 유용성**

- Arduino와 같은 자원 제한된 환경에서 타이머와 관련된 작업을 효율적으로 처리할 수 있도록 도움을 준다.

# 예시 코드

- 1초에 한번씩 깜빡이는 코드(1초에 한 번씩 깜빡이려면 0.5초 동안 켜고 0.5초 동안 꺼야 함)

```c
#include <MsTimer2.h>

void setup() {
  pinMode(2, OUTPUT);
  MsTimer2::set(500, flashLED);
  MsTimer2::start();
}
void loop() {
}
void flashLED()
{
  digitalWrite(2, !digitalRead(2));
}
```
